{"version":3,"sources":["../../src/services/games.service.ts"],"sourcesContent":["import { CreateOrUpdateGameDto } from '@/dtos/games.dto';\nimport { HttpException } from '@/exceptions/HttpException';\nimport gameModel from '@/models/games.model';\nimport { isEmpty } from 'class-validator';\n\nclass GameService {\n  public games = gameModel;\n\n  public async createGame(gameData: CreateOrUpdateGameDto, userId: string) {\n    if (isEmpty(gameData)) throw new HttpException(400, 'gameData is empty');\n\n    const findGame = await this.games.findOne({ gameId: gameData.gameId, userId: userId });\n    if (findGame) throw new HttpException(409, `This game ${gameData.gameId} already exists`);\n\n    const createGameData = await this.games.create({ ...gameData, userId: userId });\n    return createGameData;\n  }\n\n  public async getAllGamesOfUser(userId: string) {\n    if (isEmpty(userId)) throw new HttpException(400, 'userId is empty');\n\n    const findGames = await this.games.find({ userId: userId }).select('gameId');\n    return findGames;\n  }\n\n  public async getGameById(id: string) {\n    if (isEmpty(id)) throw new HttpException(400, 'gameId is empty');\n\n    const findGame = await this.games.findById(id);\n    if (!findGame) throw new HttpException(404, `This game does not exist`);\n    return findGame;\n  }\n\n  public async updateGame(id: string, gameData: CreateOrUpdateGameDto) {\n    if (isEmpty(gameData)) throw new HttpException(400, 'gameData is empty');\n    const updateGameById = await this.games.findByIdAndUpdate(id, gameData);\n    if (!updateGameById) throw new HttpException(404, `This game ${gameData.gameId} does not exist`);\n\n    return updateGameById;\n  }\n\n  public async deleteGame(id: string) {\n    if (isEmpty(id)) throw new HttpException(400, 'gameId is empty');\n\n    const deleteGameById = await this.games.findByIdAndDelete(id);\n    if (!deleteGameById) throw new HttpException(404, `This game does not exist`);\n    return deleteGameById;\n  }\n}\n\nexport default GameService;\n"],"names":["GameService","createGame","gameData","userId","isEmpty","HttpException","findGame","games","findOne","gameId","createGameData","create","getAllGamesOfUser","findGames","find","select","getGameById","id","findById","updateGame","updateGameById","findByIdAndUpdate","deleteGame","deleteGameById","findByIdAndDelete","gameModel"],"mappings":";;;;+BAkDA;;;eAAA;;;+BAjD8B;mEACR;gCACE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAExB,IAAA,AAAMA,cAAN,MAAMA;IAGJ,MAAaC,WAAWC,QAA+B,EAAEC,MAAc,EAAE;QACvE,IAAIC,IAAAA,uBAAO,EAACF,WAAW,MAAM,IAAIG,4BAAa,CAAC,KAAK;QAEpD,MAAMC,WAAW,MAAM,IAAI,CAACC,KAAK,CAACC,OAAO,CAAC;YAAEC,QAAQP,SAASO,MAAM;YAAEN,QAAQA;QAAO;QACpF,IAAIG,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAK,CAAC,UAAU,EAAEH,SAASO,MAAM,CAAC,eAAe,CAAC;QAExF,MAAMC,iBAAiB,MAAM,IAAI,CAACH,KAAK,CAACI,MAAM,CAAC,wCAAKT;YAAUC,QAAQA;;QACtE,OAAOO;IACT;IAEA,MAAaE,kBAAkBT,MAAc,EAAE;QAC7C,IAAIC,IAAAA,uBAAO,EAACD,SAAS,MAAM,IAAIE,4BAAa,CAAC,KAAK;QAElD,MAAMQ,YAAY,MAAM,IAAI,CAACN,KAAK,CAACO,IAAI,CAAC;YAAEX,QAAQA;QAAO,GAAGY,MAAM,CAAC;QACnE,OAAOF;IACT;IAEA,MAAaG,YAAYC,EAAU,EAAE;QACnC,IAAIb,IAAAA,uBAAO,EAACa,KAAK,MAAM,IAAIZ,4BAAa,CAAC,KAAK;QAE9C,MAAMC,WAAW,MAAM,IAAI,CAACC,KAAK,CAACW,QAAQ,CAACD;QAC3C,IAAI,CAACX,UAAU,MAAM,IAAID,4BAAa,CAAC,KAAK,CAAC,wBAAwB,CAAC;QACtE,OAAOC;IACT;IAEA,MAAaa,WAAWF,EAAU,EAAEf,QAA+B,EAAE;QACnE,IAAIE,IAAAA,uBAAO,EAACF,WAAW,MAAM,IAAIG,4BAAa,CAAC,KAAK;QACpD,MAAMe,iBAAiB,MAAM,IAAI,CAACb,KAAK,CAACc,iBAAiB,CAACJ,IAAIf;QAC9D,IAAI,CAACkB,gBAAgB,MAAM,IAAIf,4BAAa,CAAC,KAAK,CAAC,UAAU,EAAEH,SAASO,MAAM,CAAC,eAAe,CAAC;QAE/F,OAAOW;IACT;IAEA,MAAaE,WAAWL,EAAU,EAAE;QAClC,IAAIb,IAAAA,uBAAO,EAACa,KAAK,MAAM,IAAIZ,4BAAa,CAAC,KAAK;QAE9C,MAAMkB,iBAAiB,MAAM,IAAI,CAAChB,KAAK,CAACiB,iBAAiB,CAACP;QAC1D,IAAI,CAACM,gBAAgB,MAAM,IAAIlB,4BAAa,CAAC,KAAK,CAAC,wBAAwB,CAAC;QAC5E,OAAOkB;IACT;;QAzCA,uBAAOhB,SAAQkB,mBAAS;;AA0C1B;MAEA,WAAezB"}